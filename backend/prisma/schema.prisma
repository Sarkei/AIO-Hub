// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================
// MAIN USER TABLE (in public schema)
// ============================================
model User {
  id            String   @id @default(uuid())
  username      String   @unique
  email         String   @unique
  passwordHash  String   @map("password_hash")
  schemaName    String   @unique @map("schema_name") // z.B. "user_abc123"
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  @@map("users")
}

// USER PREFERENCES (für Sidebar State etc.)
model UserPreferences {
  id                    String   @id @default(uuid())
  userId                String   @unique @map("user_id")
  collapsedCategories   String[] @default([]) @map("collapsed_categories") // Array der collapsed category IDs
  createdAt             DateTime @default(now()) @map("created_at")
  updatedAt             DateTime @updatedAt @map("updated_at")

  @@map("user_preferences")
}

// ============================================
// USER-SPEZIFISCHE TABELLEN
// Die werden pro User in separatem Schema angelegt
// Diese Models dienen als Vorlage für die Schema-Erstellung
// ============================================

// TODOS (Kanban-Board)
model Todo {
  id          String    @id @default(uuid())
  userId      String    @map("user_id")
  title       String
  description String?
  status      TodoStatus @default(OPEN)
  dueDate     DateTime? @map("due_date")
  priority    Int       @default(1) // 1=low, 2=medium, 3=high
  order       Int       @default(0) // Für Sortierung in Spalten
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  @@map("todos")
  @@index([userId, status])
}

enum TodoStatus {
  OPEN        // Offen
  IN_PROGRESS // In Bearbeitung
  DONE        // Fertig
}

// EVENTS (Termine)
model Event {
  id          String   @id @default(uuid())
  userId      String   @map("user_id")
  title       String
  description String?
  location    String?
  startTime   DateTime @map("start_time")
  endTime     DateTime @map("end_time")
  allDay      Boolean  @default(false) @map("all_day")
  notes       String?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@map("events")
  @@index([userId, startTime])
}

// BODY METRICS (Körperdaten)
model BodyMetric {
  id          String   @id @default(uuid())
  userId      String   @map("user_id")
  date        DateTime @db.Date
  weight      Float?   // kg
  bodyFat     Float?   @map("body_fat") // Prozent
  chest       Float?   // cm
  waist       Float?   // cm
  hips        Float?   // cm
  biceps      Float?   // cm
  thighs      Float?   // cm
  calves      Float?   // cm
  notes       String?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@unique([userId, date])
  @@map("body_metrics")
  @@index([userId, date])
}

// WORKOUTS (Gym-Tracker)
model Workout {
  id          String       @id @default(uuid())
  userId      String       @map("user_id")
  name        String
  date        DateTime     @db.Date
  startTime   DateTime?    @map("start_time")
  endTime     DateTime?    @map("end_time")
  notes       String?
  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime     @updatedAt @map("updated_at")
  
  exercises   Exercise[]

  @@map("workouts")
  @@index([userId, date])
}

model Exercise {
  id          String   @id @default(uuid())
  workoutId   String   @map("workout_id")
  name        String
  order       Int      @default(0)
  notes       String?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  
  workout     Workout  @relation(fields: [workoutId], references: [id], onDelete: Cascade)
  sets        Set[]

  @@map("exercises")
  @@index([workoutId])
}

model Set {
  id          String   @id @default(uuid())
  exerciseId  String   @map("exercise_id")
  setNumber   Int      @map("set_number")
  reps        Int
  weight      Float    // kg
  isWarmup    Boolean  @default(false) @map("is_warmup")
  rpe         Int?     // Rate of Perceived Exertion (1-10)
  createdAt   DateTime @default(now()) @map("created_at")
  
  exercise    Exercise @relation(fields: [exerciseId], references: [id], onDelete: Cascade)

  @@map("sets")
  @@index([exerciseId])
}

// NUTRITION (Ernährungstracker)
model NutritionProfile {
  id              String         @id @default(uuid())
  userId          String         @unique @map("user_id")
  goal            NutritionGoal  @default(MAINTAIN)
  dietType        DietType       @default(STANDARD)
  dailyCalories   Int            @map("daily_calories")
  proteinGrams    Int            @map("protein_grams")
  carbsGrams      Int            @map("carbs_grams")
  fatGrams        Int            @map("fat_grams")
  createdAt       DateTime       @default(now()) @map("created_at")
  updatedAt       DateTime       @updatedAt @map("updated_at")

  @@map("nutrition_profiles")
}

enum NutritionGoal {
  LOSE_WEIGHT   // Abnehmen
  MAINTAIN      // Halten
  GAIN_WEIGHT   // Zunehmen
}

enum DietType {
  STANDARD      // Ausgewogen
  HIGH_PROTEIN  // High Protein
  KETO          // Ketogen
}

model NutritionLog {
  id          String   @id @default(uuid())
  userId      String   @map("user_id")
  date        DateTime @db.Date
  mealName    String   @map("meal_name") // Frühstück, Mittagessen, etc.
  foodItem    String   @map("food_item")
  calories    Int
  protein     Float
  carbs       Float
  fat         Float
  notes       String?
  createdAt   DateTime @default(now()) @map("created_at")

  @@map("nutrition_logs")
  @@index([userId, date])
}

// ============================================
// SCHOOL SYSTEM
// ============================================

// Schuljahr/Lehrjahr (z.B. 1. Lehrjahr 2024/2025)
model SchoolYear {
  id          String   @id @default(uuid())
  userId      String   @map("user_id")
  name        String   // z.B. "1. Lehrjahr", "2. Semester"
  startDate   DateTime @map("start_date") @db.Date
  endDate     DateTime @map("end_date") @db.Date
  isActive    Boolean  @default(false) @map("is_active") // Nur ein aktives Jahr pro User
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  timetableEntries TimetableEntry[]
  schoolTodos      SchoolTodo[]
  grades           Grade[]

  @@map("school_years")
  @@index([userId, isActive])
}

// Stundenplan
model TimetableEntry {
  id            String     @id @default(uuid())
  schoolYearId  String     @map("school_year_id")
  subject       String     // Fach (z.B. "Mathematik", "Programmieren")
  teacher       String?    // Lehrer
  room          String?    // Raum
  dayOfWeek     Int        @map("day_of_week") // 1=Montag, 7=Sonntag
  startTime     String     @map("start_time") // Format: "08:00"
  endTime       String     @map("end_time")   // Format: "09:30"
  color         String?    // Hex color für UI
  notes         String?
  createdAt     DateTime   @default(now()) @map("created_at")
  updatedAt     DateTime   @updatedAt @map("updated_at")

  schoolYear    SchoolYear @relation(fields: [schoolYearId], references: [id], onDelete: Cascade)

  @@map("timetable_entries")
  @@index([schoolYearId, dayOfWeek])
}

// Schul-Todos/Aufgaben
model SchoolTodo {
  id            String       @id @default(uuid())
  schoolYearId  String       @map("school_year_id")
  subject       String       // Fach
  title         String
  description   String?
  dueDate       DateTime?    @map("due_date") @db.Date
  status        TodoStatus   @default(OPEN)
  priority      Int          @default(1) // 1=low, 2=medium, 3=high
  createdAt     DateTime     @default(now()) @map("created_at")
  updatedAt     DateTime     @updatedAt @map("updated_at")

  schoolYear    SchoolYear   @relation(fields: [schoolYearId], references: [id], onDelete: Cascade)

  @@map("school_todos")
  @@index([schoolYearId, status, dueDate])
}

// Notizen-Ordner (Physische Ordnerstruktur)
model NoteFolder {
  id          String   @id @default(uuid())
  userId      String   @map("user_id")
  name        String
  path        String   // Relativer Pfad (z.B. "Mathematik/Algebra")
  parentId    String?  @map("parent_id") // Für Unterordner
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  parent      NoteFolder?  @relation("FolderHierarchy", fields: [parentId], references: [id], onDelete: Cascade)
  children    NoteFolder[] @relation("FolderHierarchy")
  notes       Note[]
  files       NoteFile[]

  @@unique([userId, path])
  @@map("note_folders")
  @@index([userId, parentId])
}

// Notizen
model Note {
  id          String      @id @default(uuid())
  userId      String      @map("user_id")
  folderId    String?     @map("folder_id")
  title       String
  content     String      @db.Text
  tags        String[]    @default([])
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @updatedAt @map("updated_at")

  folder      NoteFolder? @relation(fields: [folderId], references: [id], onDelete: SetNull)
  files       NoteFile[]

  @@map("notes")
  @@index([userId, folderId])
}

// Datei-Uploads für Notizen
model NoteFile {
  id            String   @id @default(uuid())
  noteId        String?  @map("note_id")
  userId        String   @map("user_id")
  folderId      String?  @map("folder_id")
  filename      String   // Original Dateiname
  storedName    String   @map("stored_name") // UUID_filename.ext
  filePath      String   @map("file_path") // Physischer Pfad
  fileType      String   @map("file_type") // MIME type (application/pdf, image/jpeg, etc.)
  fileSize      Int      @map("file_size") // Bytes
  annotations   Json?    // JSON für PDF/Bild-Annotationen
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  note          Note?       @relation(fields: [noteId], references: [id], onDelete: Cascade)
  folder        NoteFolder? @relation(fields: [folderId], references: [id], onDelete: SetNull)

  @@map("note_files")
  @@index([userId, folderId])
  @@index([noteId])
}

// Noten/Bewertungen
model Grade {
  id            String     @id @default(uuid())
  schoolYearId  String     @map("school_year_id")
  subject       String     // Fach
  title         String     // z.B. "Klausur 1", "Mündliche Prüfung"
  grade         Float      // Note (z.B. 1.0, 2.3, 85%)
  maxGrade      Float      @map("max_grade") // Maximale Note (z.B. 1.0 oder 100)
  weight        Float      @default(1.0) // Gewichtung für Durchschnitt
  date          DateTime   @db.Date
  notes         String?
  createdAt     DateTime   @default(now()) @map("created_at")
  updatedAt     DateTime   @updatedAt @map("updated_at")

  schoolYear    SchoolYear @relation(fields: [schoolYearId], references: [id], onDelete: Cascade)

  @@map("grades")
  @@index([schoolYearId, subject, date])
}

